// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    DOUBLE_ML_ELF, DOUBLE_ML_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};

use std::collections::HashMap;
use std::io::{BufReader, BufRead};
use std::fs::File;

fn read_weights_bias(filename: &str) -> (Vec<f64>, f64) {
    let file = File::open(filename).expect("File not found");
    let reader = BufReader::new(file);

    let mut weights = Vec::new();
    let mut bias = 0.0;
    let mut is_bias = true;

    for line in reader.lines() {
        if let Ok(value) = line {
            if let Ok(num) = value.parse::<f64>() {
                if is_bias {
                    bias = num;
                    is_bias = false;
                } else {
                    weights.push(num);
                }
            }
        }
    }

    (weights, bias)
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    
    let start = std::time::Instant::now();
    
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    let weight_file_ls_str: Vec<&str> = vec![
        "model_t", "model_y", "model_f"
    ];

    let mut weights_dict:HashMap<String, Vec<f64>> = HashMap::new();
    let mut bias_dict: HashMap<String, f64> = HashMap::new();

    for weight_file in weight_file_ls_str{
        let (weights, bias)  = read_weights_bias(&format!("weights/{}.txt", weight_file));
        weights_dict.insert(weight_file.to_string(), weights);
        bias_dict.insert(weight_file.to_string(), bias);
    }



    let env = ExecutorEnv::builder()
        .write(&weights_dict)
        .expect("weights_dict failed to serialize")
        .write(&bias_dict)
        .expect("bias_dict failed to serialize")
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, DOUBLE_ML_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;
    let end = std::time::Instant::now();

    println!("Proof generation time used: {:?}", end.duration_since(start));

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let output_result: (f64, u64) = receipt.journal.decode().unwrap();
    let (prediction, hash) = output_result;

    println!("Prediction: {}", prediction);
    println!("Hash: {}", hash);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(DOUBLE_ML_ID)
        .unwrap();
}
